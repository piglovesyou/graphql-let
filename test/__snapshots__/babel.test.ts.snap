// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated files are okay: fixtures/*/node_modules/** 1`] = `
Array [
  "fixtures/basic/node_modules/@types/graphql-let/index.d.ts",
  "fixtures/basic/node_modules/@types/graphql-let/input-1ffee34aad94b8da4e33faf385ded9238d7affef.d.ts",
  "fixtures/basic/node_modules/@types/graphql-let/store.json",
  "fixtures/basic/node_modules/graphql-let/__generated__/input-1ffee34aad94b8da4e33faf385ded9238d7affef.tsx",
  "fixtures/tagged-template-call/node_modules/@types/graphql-let/index.d.ts",
  "fixtures/tagged-template-call/node_modules/@types/graphql-let/input-98fe64b5c1bccab885117fbeac3ea597d4f7e02d.d.ts",
  "fixtures/tagged-template-call/node_modules/@types/graphql-let/store.json",
  "fixtures/tagged-template-call/node_modules/graphql-let/__generated__/input-98fe64b5c1bccab885117fbeac3ea597d4f7e02d.tsx",
  "fixtures/with-fragments/node_modules/@types/graphql-let/index.d.ts",
  "fixtures/with-fragments/node_modules/@types/graphql-let/input-3e81ed6254d58faa4d4bb8a12568fa59509c0acb.d.ts",
  "fixtures/with-fragments/node_modules/@types/graphql-let/store.json",
  "fixtures/with-fragments/node_modules/graphql-let/__generated__/input-3e81ed6254d58faa4d4bb8a12568fa59509c0acb.tsx",
]
`;

exports[`Generated files are okay: fixtures/basic/node_modules/@types/graphql-let/index.d.ts 1`] = `
"import T1ffee34aad94b8da4e33faf385ded9238d7affef from './input-1ffee34aad94b8da4e33faf385ded9238d7affef.d.ts';
export default function gql(gql: \`query Viewer { viewer { name } }\`): T1ffee34aad94b8da4e33faf385ded9238d7affef.__AllExports;
"
`;

exports[`Generated files are okay: fixtures/basic/node_modules/@types/graphql-let/input-1ffee34aad94b8da4e33faf385ded9238d7affef.d.ts 1`] = `
"/* 1ffee34aad94b8da4e33faf385ded9238d7affef
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Maybe<({
    __typename?: 'User';
  } & Pick<User, 'name'>)>;
});
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __AllExports = {
  Maybe: Maybe;
  Exact: Exact;
  Scalars: Scalars;
  Query: Query;
  User: User;
  ViewerQueryVariables: ViewerQueryVariables;
  ViewerQuery: ViewerQuery;
  ViewerDocument: ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
  ViewerQueryHookResult: ViewerQueryHookResult;
  ViewerLazyQueryHookResult: ViewerLazyQueryHookResult;
  ViewerQueryResult: ViewerQueryResult;
};"
`;

exports[`Generated files are okay: fixtures/basic/node_modules/@types/graphql-let/store.json 1`] = `
"{
  \\"input.tsx\\": {
    \\"1ffee34aad94b8da4e33faf385ded9238d7affef\\": [
      \\"input-1ffee34aad94b8da4e33faf385ded9238d7affef.d.ts\\",
      \\"query Viewer { viewer { name } }\\"
    ]
  }
}"
`;

exports[`Generated files are okay: fixtures/basic/node_modules/graphql-let/__generated__/input-1ffee34aad94b8da4e33faf385ded9238d7affef.tsx 1`] = `
"/* 1ffee34aad94b8da4e33faf385ded9238d7affef
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'name'>
  )> }
);


export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    name
  }
}
    \`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`Generated files are okay: fixtures/tagged-template-call/node_modules/@types/graphql-let/index.d.ts 1`] = `
"import T98fe64b5c1bccab885117fbeac3ea597d4f7e02d from './input-98fe64b5c1bccab885117fbeac3ea597d4f7e02d.d.ts';
export default function gql(gql: \`
    query Viewer {
        viewer {
            name
        }
    }
\`): T98fe64b5c1bccab885117fbeac3ea597d4f7e02d.__AllExports;
"
`;

exports[`Generated files are okay: fixtures/tagged-template-call/node_modules/@types/graphql-let/input-98fe64b5c1bccab885117fbeac3ea597d4f7e02d.d.ts 1`] = `
"/* 98fe64b5c1bccab885117fbeac3ea597d4f7e02d
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Maybe<({
    __typename?: 'User';
  } & Pick<User, 'name'>)>;
});
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __AllExports = {
  Maybe: Maybe;
  Exact: Exact;
  Scalars: Scalars;
  Query: Query;
  User: User;
  ViewerQueryVariables: ViewerQueryVariables;
  ViewerQuery: ViewerQuery;
  ViewerDocument: ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
  ViewerQueryHookResult: ViewerQueryHookResult;
  ViewerLazyQueryHookResult: ViewerLazyQueryHookResult;
  ViewerQueryResult: ViewerQueryResult;
};"
`;

exports[`Generated files are okay: fixtures/tagged-template-call/node_modules/@types/graphql-let/store.json 1`] = `
"{
  \\"input.tsx\\": {
    \\"98fe64b5c1bccab885117fbeac3ea597d4f7e02d\\": [
      \\"input-98fe64b5c1bccab885117fbeac3ea597d4f7e02d.d.ts\\",
      \\"\\\\n    query Viewer {\\\\n        viewer {\\\\n            name\\\\n        }\\\\n    }\\\\n\\"
    ]
  }
}"
`;

exports[`Generated files are okay: fixtures/tagged-template-call/node_modules/graphql-let/__generated__/input-98fe64b5c1bccab885117fbeac3ea597d4f7e02d.tsx 1`] = `
"/* 98fe64b5c1bccab885117fbeac3ea597d4f7e02d
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'name'>
  )> }
);


export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    name
  }
}
    \`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`Generated files are okay: fixtures/with-fragments/node_modules/@types/graphql-let/index.d.ts 1`] = `
"import T3e81ed6254d58faa4d4bb8a12568fa59509c0acb from './input-3e81ed6254d58faa4d4bb8a12568fa59509c0acb.d.ts';
export default function gql(gql: \`
  # import Partial from './partial.graphql'
  query Viewer {
    viewer {
      ...Partial
    }
  }
\`): T3e81ed6254d58faa4d4bb8a12568fa59509c0acb.__AllExports;
"
`;

exports[`Generated files are okay: fixtures/with-fragments/node_modules/@types/graphql-let/input-3e81ed6254d58faa4d4bb8a12568fa59509c0acb.d.ts 1`] = `
"/* 3e81ed6254d58faa4d4bb8a12568fa59509c0acb
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type ViewerQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __AllExports = {
  Maybe: Maybe;
  Exact: Exact;
  Scalars: Scalars;
  Query: Query;
  User: User;
  ViewerQueryVariables: ViewerQueryVariables;
  ViewerQuery: ViewerQuery;
  PartialFragment: PartialFragment;
  PartialFragmentDoc: PartialFragmentDoc;
  ViewerDocument: ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
  ViewerQueryHookResult: ViewerQueryHookResult;
  ViewerLazyQueryHookResult: ViewerLazyQueryHookResult;
  ViewerQueryResult: ViewerQueryResult;
};"
`;

exports[`Generated files are okay: fixtures/with-fragments/node_modules/@types/graphql-let/store.json 1`] = `
"{
  \\"input.tsx\\": {
    \\"3e81ed6254d58faa4d4bb8a12568fa59509c0acb\\": [
      \\"input-3e81ed6254d58faa4d4bb8a12568fa59509c0acb.d.ts\\",
      \\"\\\\n  # import Partial from './partial.graphql'\\\\n  query Viewer {\\\\n    viewer {\\\\n      ...Partial\\\\n    }\\\\n  }\\\\n\\"
    ]
  }
}"
`;

exports[`Generated files are okay: fixtures/with-fragments/node_modules/graphql-let/__generated__/input-3e81ed6254d58faa4d4bb8a12568fa59509c0acb.tsx 1`] = `
"/* 3e81ed6254d58faa4d4bb8a12568fa59509c0acb
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type ViewerQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;
