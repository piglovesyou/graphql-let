// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql-let/loader generates .tsx and .d.ts 1`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    id
    name
    status
  }
}
    \`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  return Apollo.useQuery(ViewerDocument, baseOptions);
}
export function useViewerLazyQuery(baseOptions) {
  return Apollo.useLazyQuery(ViewerDocument, baseOptions);
}"
`;
