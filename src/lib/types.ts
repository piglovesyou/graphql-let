export type CommandOpts = {
  cwd: string;
  configFilePath?: string;
};

export type CreatedPathsBase = {
  // "tsx" stands for `.ts(x)`s generated by GraphQL code generator as intermediate artifacts
  tsxRelPath: string;
  tsxFullPath: string;
  // "dts" stands for `.d.ts`s generated by graphql-let
  dtsRelPath: string;
  dtsFullPath: string;
};

/**
 * "gql" stands for `.graphql`s and `.graphqls`s as source files
 */
export type GqlCreatedPaths = CreatedPathsBase & {
  gqlRelPath: string;
  gqlFullPath: string;
};

/**
 * "source" `.ts(x)`s containing `gql(`query {}`)` calls
 */
export type SrcCreatedPaths = CreatedPathsBase & {
  srcRelPath: string;
  srcFullPath: string;
};

export type CodegenContext = GqlCreatedPaths & {
  gqlHash: string;
  dtsContentDecorator: (content: string) => string;
};

export type GqlCodegenContext = SrcCreatedPaths & {
  gqlHash: string;
  gqlContent: string;
  strippedGqlContent: string;
};

export type SkippedContext = {
  tsxFullPath: string;
  dtsFullPath: string;
};
