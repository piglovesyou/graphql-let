// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql-let/loader The option "silent" suppresses standard output logs 1`] = `
"Processing pages/index.tsx...
Processing codegen for pages/index.tsx...
Processing pages/viewer.graphql...
Processing codegen for pages/viewer.graphql...
Generating d.ts for pages/viewer.graphql...
Generating d.ts for pages/index.tsx...
Done processing pages/viewer.graphql.
Done processing pages/index.tsx.
Processing __generated__/pages/index-ViewerY-Partial.tsx...
Processing __generated__/pages/index-Viewer-Partial.tsx...
"
`;

exports[`graphql-let/loader generates .tsx and .d.ts 1`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(ViewerDocument, options);
}
export function useViewerLazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(ViewerDocument, options);
}"
`;

exports[`graphql-let/loader generates .tsx and .d.ts 2`] = `
"import * as V43344f2232f14c0a26b5f342e236a8267abe741c from \\"./../__generated__/pages/index-ViewerY-Partial.tsx\\";
import * as V4c1bbc6b80516e4665ff073a6a75e59385e7b375 from \\"./../__generated__/pages/index-Viewer-Partial.tsx\\";
const {
  useViewerQuery
} = V4c1bbc6b80516e4665ff073a6a75e59385e7b375;
useViewerQuery().data.viewer.name; // @ts-expect-error

useViewerQuery();
const {
  useViewerYQuery
} = V43344f2232f14c0a26b5f342e236a8267abe741c;
useViewerYQuery().data.viewer.name; // @ts-expect-error

useViewerYQuery();"
`;

exports[`graphql-let/loader options accept absolute config path in options.configFile 2`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};


export const GetFruitsDocument = gql\`
    query GetFruits {
  fruits {
    id
    name
    flavor
  }
}
    \`;


export function useGetFruitsQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(GetFruitsDocument, options);
}
export function useGetFruitsLazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(GetFruitsDocument, options);
}"
`;

exports[`graphql-let/loader options accept relative config path in options.configFile 2`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};


export const GetFruitsDocument = gql\`
    query GetFruits {
  fruits {
    id
    name
    flavor
  }
}
    \`;


export function useGetFruitsQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(GetFruitsDocument, options);
}
export function useGetFruitsLazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(GetFruitsDocument, options);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 1`] = `
"/* 4c1bbc6b80516e4665ff073a6a75e59385e7b375
 * This file is automatically generated by graphql-let. */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(ViewerDocument, options);
}
export function useViewerLazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(ViewerDocument, options);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 2`] = `
"/* 4c1bbc6b80516e4665ff073a6a75e59385e7b375
 * This file is automatically generated by graphql-let. */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(ViewerDocument, options);
}
export function useViewerLazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(ViewerDocument, options);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 3`] = `
"/* 4c1bbc6b80516e4665ff073a6a75e59385e7b375
 * This file is automatically generated by graphql-let. */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(ViewerDocument, options);
}
export function useViewerLazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(ViewerDocument, options);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 4`] = `
"/* 4c1bbc6b80516e4665ff073a6a75e59385e7b375
 * This file is automatically generated by graphql-let. */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export function useViewerQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(ViewerDocument, options);
}
export function useViewerLazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(ViewerDocument, options);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 5`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const Viewer2Document = gql\`
    query Viewer2 {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;
/**
 * __useViewer2Query__
 *
 * To run a query within a React component, call \`useViewer2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewer2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewer2Query({
 *   variables: {
 *   },
 * });
 */

export function useViewer2Query(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(Viewer2Document, options);
}
export function useViewer2LazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(Viewer2Document, options);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR 6`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};
/** All built-in and custom scalars, mapped to their actual values */

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const Viewer2Document = gql\`
    query Viewer2 {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;
/**
 * __useViewer2Query__
 *
 * To run a query within a React component, call \`useViewer2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewer2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewer2Query({
 *   variables: {
 *   },
 * });
 */

export function useViewer2Query(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(Viewer2Document, options);
}
export function useViewer2LazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(Viewer2Document, options);
}"
`;
