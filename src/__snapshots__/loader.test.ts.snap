// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql-let/loader generates .tsx and .d.ts: .cache/**/*.tsx + **/*.d.ts 1`] = `
Array [
  ".cache/__types__.tsx",
  ".cache/pages/index-Viewer-Partial.tsx",
  ".cache/pages/index-ViewerY-Partial.tsx",
  ".cache/pages/viewer.graphql.tsx",
  "node_modules/@types/graphql-let/__generated__/__types__.d.ts",
  "node_modules/@types/graphql-let/__generated__/pages/index-Viewer-Partial.d.ts",
  "node_modules/@types/graphql-let/__generated__/pages/index-ViewerY-Partial.d.ts",
  "node_modules/@types/graphql-let/index.d.ts",
  "node_modules/@types/graphql-let/macro.d.ts",
  "pages/viewer.graphql.d.ts",
]
`;

exports[`graphql-let/loader generates .tsx and .d.ts: .cache/__types__.tsx 1`] = `
"/* 75d7e2a98bc6fe190a99eca03ce69488c4b6373c
 * This file is automatically generated by graphql-let. */

import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver, StorageAdapter as GraphCacheStorageAdapter } from '@urql/exchange-graphcache';
import { IntrospectionData } from '@urql/exchange-graphcache/dist/types/ast';
import { GraphQLResolveInfo } from 'graphql';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type WithTypename<T extends { __typename?: any }> = { [K in Exclude<keyof T, '__typename'>]?: T[K] } & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  User?: (data: WithTypename<User>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    viewer?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, WithTypename<User> | string>
  },
  User?: {
    id?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['ID'] | string>,
    name?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>,
    status?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  {}
};

export type GraphCacheUpdaters = {
  Mutation?: {},
  Subscription?: {},
};

export type GraphCacheConfig = {
  schema?: IntrospectionData,
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers,
  storage?: GraphCacheStorageAdapter
};


export type ResolverTypeWrapper<T> = Promise<T> | T;


export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>;
  User: ResolverTypeWrapper<User>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  String: ResolverTypeWrapper<Scalars['String']>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Query: {};
  User: User;
  ID: Scalars['ID'];
  String: Scalars['String'];
  Boolean: Scalars['Boolean'];
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  viewer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Query?: QueryResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
};


/**
 * @deprecated
 * Use \\"Resolvers\\" root object instead. If you wish to get \\"IResolvers\\", add \\"typesPrefix: I\\" to your config.
 */
export type IResolvers<ContextType = any> = Resolvers<ContextType>;
"
`;

exports[`graphql-let/loader generates .tsx and .d.ts: .cache/pages/index-Viewer-Partial.tsx 1`] = `
"/* 8d50d79c46699b4f84f5acf54ec2294dc30f3e4c
 * This file is automatically generated by graphql-let. */

import * as Types from '../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type ViewerQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Types.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<Types.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`graphql-let/loader generates .tsx and .d.ts: .cache/pages/index-ViewerY-Partial.tsx 1`] = `
"/* b07a9c68cf38a049fbd12b3ae646b1e93e380e0b
 * This file is automatically generated by graphql-let. */

import * as Types from '../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type ViewerYQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ViewerYQuery = (
  { __typename?: 'Query' }
  & { viewer?: Types.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<Types.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerYDocument = gql\`
    query ViewerY {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerYQuery__
 *
 * To run a query within a React component, call \`useViewerYQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerYQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerYQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerYQuery(baseOptions?: Apollo.QueryHookOptions<ViewerYQuery, ViewerYQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerYQuery, ViewerYQueryVariables>(ViewerYDocument, options);
      }
export function useViewerYLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerYQuery, ViewerYQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerYQuery, ViewerYQueryVariables>(ViewerYDocument, options);
        }
export type ViewerYQueryHookResult = ReturnType<typeof useViewerYQuery>;
export type ViewerYLazyQueryHookResult = ReturnType<typeof useViewerYLazyQuery>;
export type ViewerYQueryResult = Apollo.QueryResult<ViewerYQuery, ViewerYQueryVariables>;"
`;

exports[`graphql-let/loader generates .tsx and .d.ts: .cache/pages/viewer.graphql.tsx 1`] = `
"/* 8d50d79c46699b4f84f5acf54ec2294dc30f3e4c
 * This file is automatically generated by graphql-let. */

import * as Types from '../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type ViewerQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Types.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<Types.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`graphql-let/loader generates .tsx and .d.ts: node_modules/@types/graphql-let/__generated__/__types__.d.ts 1`] = `
"/* 75d7e2a98bc6fe190a99eca03ce69488c4b6373c
 * This file is automatically generated by graphql-let. */

import { Resolver as GraphCacheResolver, StorageAdapter as GraphCacheStorageAdapter } from '@urql/exchange-graphcache';
import { IntrospectionData } from '@urql/exchange-graphcache/dist/types/ast';
import { GraphQLResolveInfo } from 'graphql';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type WithTypename<T extends {
  __typename?: any;
}> = { [K in Exclude<keyof T, '__typename'>]?: T[K] } & {
  __typename: NonNullable<T['__typename']>;
};
export declare type GraphCacheKeysConfig = {
  User?: (data: WithTypename<User>) => null | string;
};
export declare type GraphCacheResolvers = {
  Query?: {
    viewer?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, WithTypename<User> | string>;
  };
  User?: {
    id?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['ID'] | string>;
    name?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>;
    status?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>;
  };
};
export declare type GraphCacheOptimisticUpdaters = {};
export declare type GraphCacheUpdaters = {
  Mutation?: {};
  Subscription?: {};
};
export declare type GraphCacheConfig = {
  schema?: IntrospectionData;
  updates?: GraphCacheUpdaters;
  keys?: GraphCacheKeysConfig;
  optimistic?: GraphCacheOptimisticUpdaters;
  resolvers?: GraphCacheResolvers;
  storage?: GraphCacheStorageAdapter;
};
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */

export declare type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>;
  User: ResolverTypeWrapper<User>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  String: ResolverTypeWrapper<Scalars['String']>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};
/** Mapping between all available schema types and the resolvers parents */

export declare type ResolversParentTypes = {
  Query: {};
  User: User;
  ID: Scalars['ID'];
  String: Scalars['String'];
  Boolean: Scalars['Boolean'];
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  viewer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
};
export declare type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};
export declare type Resolvers<ContextType = any> = {
  Query?: QueryResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
};
/**
 * @deprecated
 * Use \\"Resolvers\\" root object instead. If you wish to get \\"IResolvers\\", add \\"typesPrefix: I\\" to your config.
 */

export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;"
`;

exports[`graphql-let/loader generates .tsx and .d.ts: node_modules/@types/graphql-let/__generated__/pages/index-Viewer-Partial.d.ts 1`] = `
"/* 8d50d79c46699b4f84f5acf54ec2294dc30f3e4c
 * This file is automatically generated by graphql-let. */

import * as Types from \\"../__types__\\";
import * as Apollo from '@apollo/client';
export declare type ViewerQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Types.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<Types.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  PartialFragmentDoc: typeof PartialFragmentDoc;
  ViewerDocument: typeof ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
};"
`;

exports[`graphql-let/loader generates .tsx and .d.ts: node_modules/@types/graphql-let/__generated__/pages/index-ViewerY-Partial.d.ts 1`] = `
"/* b07a9c68cf38a049fbd12b3ae646b1e93e380e0b
 * This file is automatically generated by graphql-let. */

import * as Types from \\"../__types__\\";
import * as Apollo from '@apollo/client';
export declare type ViewerYQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type ViewerYQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Types.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<Types.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerYDocument: Apollo.DocumentNode;
/**
 * __useViewerYQuery__
 *
 * To run a query within a React component, call \`useViewerYQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerYQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerYQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerYQuery(baseOptions?: Apollo.QueryHookOptions<ViewerYQuery, ViewerYQueryVariables>): Apollo.QueryResult<ViewerYQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useViewerYLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerYQuery, ViewerYQueryVariables>): Apollo.QueryTuple<ViewerYQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare type ViewerYQueryHookResult = ReturnType<typeof useViewerYQuery>;
export declare type ViewerYLazyQueryHookResult = ReturnType<typeof useViewerYLazyQuery>;
export declare type ViewerYQueryResult = Apollo.QueryResult<ViewerYQuery, ViewerYQueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  PartialFragmentDoc: typeof PartialFragmentDoc;
  ViewerYDocument: typeof ViewerYDocument;
  useViewerYQuery: typeof useViewerYQuery;
  useViewerYLazyQuery: typeof useViewerYLazyQuery;
};"
`;

exports[`graphql-let/loader generates .tsx and .d.ts: node_modules/@types/graphql-let/index.d.ts 1`] = `
"import T8d50d79c46699b4f84f5acf54ec2294dc30f3e4c from './__generated__/pages/index-Viewer-Partial';
export function load(load: \`./viewer.graphql\`): T8d50d79c46699b4f84f5acf54ec2294dc30f3e4c.__GraphQLLetTypeInjection;
import Tb07a9c68cf38a049fbd12b3ae646b1e93e380e0b from './__generated__/pages/index-ViewerY-Partial';
export function gql(gql: \`
  # import Partial from './partial.graphql'
  query ViewerY {
    viewer {
      ...Partial
    }
  }
\`): Tb07a9c68cf38a049fbd12b3ae646b1e93e380e0b.__GraphQLLetTypeInjection;
"
`;

exports[`graphql-let/loader generates .tsx and .d.ts: node_modules/@types/graphql-let/macro.d.ts 1`] = `
"export { gql } from \\".\\";
export { load } from \\".\\";
"
`;

exports[`graphql-let/loader generates .tsx and .d.ts: pages/viewer.graphql.d.ts 1`] = `
"/* 8d50d79c46699b4f84f5acf54ec2294dc30f3e4c
 * This file is automatically generated by graphql-let. */

import * as Types from \\"graphql-let/__generated__/__types__\\";
import * as Apollo from '@apollo/client';
export declare type ViewerQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Types.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<Types.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`graphql-let/loader options accept absolute config path in options.configFile 1`] = `
Array [
  "./src/index.ts",
  "./src/fruits.graphql",
]
`;

exports[`graphql-let/loader options accept absolute config path in options.configFile 2`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};
export const GetFruitsDocument = gql\`
    query GetFruits {
  fruits {
    id
    name
    flavor
  }
}
    \`;


export function useGetFruitsQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(GetFruitsDocument, options);
}
export function useGetFruitsLazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(GetFruitsDocument, options);
}"
`;

exports[`graphql-let/loader options accept relative config path in options.configFile 1`] = `
Array [
  "./src/index.ts",
  "./src/fruits.graphql",
]
`;

exports[`graphql-let/loader options accept relative config path in options.configFile 2`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {};
export const GetFruitsDocument = gql\`
    query GetFruits {
  fruits {
    id
    name
    flavor
  }
}
    \`;


export function useGetFruitsQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useQuery(GetFruitsDocument, options);
}
export function useGetFruitsLazyQuery(baseOptions) {
  const options = { ...defaultOptions,
    ...baseOptions
  };
  return Apollo.useLazyQuery(GetFruitsDocument, options);
}"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: **/.cache/**/*.tsx + **/__generated__/**/*.d.ts + **/*.graphql.d.ts 1`] = `
Array [
  ".cache/__types__.tsx",
  ".cache/pages/index-Viewer-Partial.tsx",
  ".cache/pages/index-ViewerY-Partial.tsx",
  ".cache/pages/viewer.graphql.tsx",
  ".cache/pages/viewer2.graphql.tsx",
  "node_modules/@types/graphql-let/__generated__/__types__.d.ts",
  "node_modules/@types/graphql-let/__generated__/pages/index-Viewer-Partial.d.ts",
  "node_modules/@types/graphql-let/__generated__/pages/index-ViewerY-Partial.d.ts",
  "pages/viewer.graphql.d.ts",
  "pages/viewer2.graphql.d.ts",
]
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: .cache/__types__.tsx 1`] = `
"/* 75d7e2a98bc6fe190a99eca03ce69488c4b6373c
 * This file is automatically generated by graphql-let. */

import { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver, StorageAdapter as GraphCacheStorageAdapter } from '@urql/exchange-graphcache';
import { IntrospectionData } from '@urql/exchange-graphcache/dist/types/ast';
import { GraphQLResolveInfo } from 'graphql';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};

export type WithTypename<T extends { __typename?: any }> = { [K in Exclude<keyof T, '__typename'>]?: T[K] } & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  User?: (data: WithTypename<User>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    viewer?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, WithTypename<User> | string>
  },
  User?: {
    id?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['ID'] | string>,
    name?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>,
    status?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  {}
};

export type GraphCacheUpdaters = {
  Mutation?: {},
  Subscription?: {},
};

export type GraphCacheConfig = {
  schema?: IntrospectionData,
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers,
  storage?: GraphCacheStorageAdapter
};


export type ResolverTypeWrapper<T> = Promise<T> | T;


export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>;
  User: ResolverTypeWrapper<User>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  String: ResolverTypeWrapper<Scalars['String']>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Query: {};
  User: User;
  ID: Scalars['ID'];
  String: Scalars['String'];
  Boolean: Scalars['Boolean'];
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  viewer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Query?: QueryResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
};


/**
 * @deprecated
 * Use \\"Resolvers\\" root object instead. If you wish to get \\"IResolvers\\", add \\"typesPrefix: I\\" to your config.
 */
export type IResolvers<ContextType = any> = Resolvers<ContextType>;
"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: .cache/pages/index-Viewer-Partial.tsx 1`] = `
"/* 8d50d79c46699b4f84f5acf54ec2294dc30f3e4c
 * This file is automatically generated by graphql-let. */

import * as Types from '../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type ViewerQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Types.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<Types.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: .cache/pages/index-ViewerY-Partial.tsx 1`] = `
"/* b07a9c68cf38a049fbd12b3ae646b1e93e380e0b
 * This file is automatically generated by graphql-let. */

import * as Types from '../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type ViewerYQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ViewerYQuery = (
  { __typename?: 'Query' }
  & { viewer?: Types.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<Types.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerYDocument = gql\`
    query ViewerY {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerYQuery__
 *
 * To run a query within a React component, call \`useViewerYQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerYQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerYQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerYQuery(baseOptions?: Apollo.QueryHookOptions<ViewerYQuery, ViewerYQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerYQuery, ViewerYQueryVariables>(ViewerYDocument, options);
      }
export function useViewerYLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerYQuery, ViewerYQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerYQuery, ViewerYQueryVariables>(ViewerYDocument, options);
        }
export type ViewerYQueryHookResult = ReturnType<typeof useViewerYQuery>;
export type ViewerYLazyQueryHookResult = ReturnType<typeof useViewerYLazyQuery>;
export type ViewerYQueryResult = Apollo.QueryResult<ViewerYQuery, ViewerYQueryVariables>;"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: .cache/pages/viewer.graphql.tsx 1`] = `
"/* 8d50d79c46699b4f84f5acf54ec2294dc30f3e4c
 * This file is automatically generated by graphql-let. */

import * as Types from '../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type ViewerQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & { viewer?: Types.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<Types.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const ViewerDocument = gql\`
    query Viewer {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
      }
export function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: .cache/pages/viewer2.graphql.tsx 1`] = `
"/* e5e27f2a80dee21b5571998a7366c2a6d0f2fad8
 * This file is automatically generated by graphql-let. */

import * as Types from '../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type Viewer2QueryVariables = Types.Exact<{ [key: string]: never; }>;


export type Viewer2Query = (
  { __typename?: 'Query' }
  & { viewer?: Types.Maybe<(
    { __typename?: 'User' }
    & PartialFragment
  )> }
);

export type PartialFragment = (
  { __typename?: 'User' }
  & Pick<Types.User, 'id' | 'name'>
);

export const PartialFragmentDoc = gql\`
    fragment Partial on User {
  id
  name
}
    \`;
export const Viewer2Document = gql\`
    query Viewer2 {
  viewer {
    ...Partial
  }
}
    \${PartialFragmentDoc}\`;

/**
 * __useViewer2Query__
 *
 * To run a query within a React component, call \`useViewer2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewer2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewer2Query({
 *   variables: {
 *   },
 * });
 */
export function useViewer2Query(baseOptions?: Apollo.QueryHookOptions<Viewer2Query, Viewer2QueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Viewer2Query, Viewer2QueryVariables>(Viewer2Document, options);
      }
export function useViewer2LazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Viewer2Query, Viewer2QueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Viewer2Query, Viewer2QueryVariables>(Viewer2Document, options);
        }
export type Viewer2QueryHookResult = ReturnType<typeof useViewer2Query>;
export type Viewer2LazyQueryHookResult = ReturnType<typeof useViewer2LazyQuery>;
export type Viewer2QueryResult = Apollo.QueryResult<Viewer2Query, Viewer2QueryVariables>;"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: node_modules/@types/graphql-let/__generated__/__types__.d.ts 1`] = `
"/* 75d7e2a98bc6fe190a99eca03ce69488c4b6373c
 * This file is automatically generated by graphql-let. */

import { Resolver as GraphCacheResolver, StorageAdapter as GraphCacheStorageAdapter } from '@urql/exchange-graphcache';
import { IntrospectionData } from '@urql/exchange-graphcache/dist/types/ast';
import { GraphQLResolveInfo } from 'graphql';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
  [key: string]: unknown;
}> = { [K in keyof T]: T[K] };
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */

export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Query = {
  __typename?: 'Query';
  viewer?: Maybe<User>;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
};
export declare type WithTypename<T extends {
  __typename?: any;
}> = { [K in Exclude<keyof T, '__typename'>]?: T[K] } & {
  __typename: NonNullable<T['__typename']>;
};
export declare type GraphCacheKeysConfig = {
  User?: (data: WithTypename<User>) => null | string;
};
export declare type GraphCacheResolvers = {
  Query?: {
    viewer?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, WithTypename<User> | string>;
  };
  User?: {
    id?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['ID'] | string>;
    name?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>;
    status?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>;
  };
};
export declare type GraphCacheOptimisticUpdaters = {};
export declare type GraphCacheUpdaters = {
  Mutation?: {};
  Subscription?: {};
};
export declare type GraphCacheConfig = {
  schema?: IntrospectionData;
  updates?: GraphCacheUpdaters;
  keys?: GraphCacheKeysConfig;
  optimistic?: GraphCacheOptimisticUpdaters;
  resolvers?: GraphCacheResolvers;
  storage?: GraphCacheStorageAdapter;
};
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */

export declare type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>;
  User: ResolverTypeWrapper<User>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  String: ResolverTypeWrapper<Scalars['String']>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};
/** Mapping between all available schema types and the resolvers parents */

export declare type ResolversParentTypes = {
  Query: {};
  User: User;
  ID: Scalars['ID'];
  String: Scalars['String'];
  Boolean: Scalars['Boolean'];
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  viewer?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
};
export declare type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};
export declare type Resolvers<ContextType = any> = {
  Query?: QueryResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
};
/**
 * @deprecated
 * Use \\"Resolvers\\" root object instead. If you wish to get \\"IResolvers\\", add \\"typesPrefix: I\\" to your config.
 */

export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: node_modules/@types/graphql-let/__generated__/pages/index-Viewer-Partial.d.ts 1`] = `
"/* 8d50d79c46699b4f84f5acf54ec2294dc30f3e4c
 * This file is automatically generated by graphql-let. */

import * as Types from \\"../__types__\\";
import * as Apollo from '@apollo/client';
export declare type ViewerQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Types.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<Types.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  PartialFragmentDoc: typeof PartialFragmentDoc;
  ViewerDocument: typeof ViewerDocument;
  useViewerQuery: typeof useViewerQuery;
  useViewerLazyQuery: typeof useViewerLazyQuery;
};"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: node_modules/@types/graphql-let/__generated__/pages/index-ViewerY-Partial.d.ts 1`] = `
"/* b07a9c68cf38a049fbd12b3ae646b1e93e380e0b
 * This file is automatically generated by graphql-let. */

import * as Types from \\"../__types__\\";
import * as Apollo from '@apollo/client';
export declare type ViewerYQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type ViewerYQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Types.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<Types.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerYDocument: Apollo.DocumentNode;
/**
 * __useViewerYQuery__
 *
 * To run a query within a React component, call \`useViewerYQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerYQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerYQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerYQuery(baseOptions?: Apollo.QueryHookOptions<ViewerYQuery, ViewerYQueryVariables>): Apollo.QueryResult<ViewerYQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useViewerYLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerYQuery, ViewerYQueryVariables>): Apollo.QueryTuple<ViewerYQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare type ViewerYQueryHookResult = ReturnType<typeof useViewerYQuery>;
export declare type ViewerYLazyQueryHookResult = ReturnType<typeof useViewerYLazyQuery>;
export declare type ViewerYQueryResult = Apollo.QueryResult<ViewerYQuery, ViewerYQueryVariables>;
export declare type __GraphQLLetTypeInjection = {
  PartialFragmentDoc: typeof PartialFragmentDoc;
  ViewerYDocument: typeof ViewerYDocument;
  useViewerYQuery: typeof useViewerYQuery;
  useViewerYLazyQuery: typeof useViewerYLazyQuery;
};"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: pages/viewer.graphql.d.ts 1`] = `
"/* 8d50d79c46699b4f84f5acf54ec2294dc30f3e4c
 * This file is automatically generated by graphql-let. */

import * as Types from \\"graphql-let/__generated__/__types__\\";
import * as Apollo from '@apollo/client';
export declare type ViewerQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type ViewerQuery = ({
  __typename?: 'Query';
} & {
  viewer?: Types.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<Types.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const ViewerDocument: Apollo.DocumentNode;
/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call \`useViewerQuery\` and pass it any options that fit your needs.
 * When your component renders, \`useViewerQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useViewerQuery(baseOptions?: Apollo.QueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryResult<ViewerQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useViewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>): Apollo.QueryTuple<ViewerQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export declare type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export declare type ViewerQueryResult = Apollo.QueryResult<ViewerQuery, ViewerQueryVariables>;"
`;

exports[`graphql-let/loader runs well for simultaneous execution, assuming SSR: pages/viewer2.graphql.d.ts 1`] = `
"/* e5e27f2a80dee21b5571998a7366c2a6d0f2fad8
 * This file is automatically generated by graphql-let. */

import * as Types from \\"graphql-let/__generated__/__types__\\";
import * as Apollo from '@apollo/client';
export declare type Viewer2QueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type Viewer2Query = ({
  __typename?: 'Query';
} & {
  viewer?: Types.Maybe<({
    __typename?: 'User';
  } & PartialFragment)>;
});
export declare type PartialFragment = ({
  __typename?: 'User';
} & Pick<Types.User, 'id' | 'name'>);
export declare const PartialFragmentDoc: Apollo.DocumentNode;
export declare const Viewer2Document: Apollo.DocumentNode;
/**
 * __useViewer2Query__
 *
 * To run a query within a React component, call \`useViewer2Query\` and pass it any options that fit your needs.
 * When your component renders, \`useViewer2Query\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewer2Query({
 *   variables: {
 *   },
 * });
 */

export declare function useViewer2Query(baseOptions?: Apollo.QueryHookOptions<Viewer2Query, Viewer2QueryVariables>): Apollo.QueryResult<Viewer2Query, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useViewer2LazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Viewer2Query, Viewer2QueryVariables>): Apollo.QueryTuple<Viewer2Query, Types.Exact<{
  [key: string]: never;
}>>;
export declare type Viewer2QueryHookResult = ReturnType<typeof useViewer2Query>;
export declare type Viewer2LazyQueryHookResult = ReturnType<typeof useViewer2LazyQuery>;
export declare type Viewer2QueryResult = Apollo.QueryResult<Viewer2Query, Viewer2QueryVariables>;"
`;
